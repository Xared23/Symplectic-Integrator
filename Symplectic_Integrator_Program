import numpy as np
import matplotlib.pyplot as plt

# L = m*l^2*thetadot
# H = (L^2)/(2m(l^2))


def sigma1(qp,t):
    def DV(q):
        result = m*g*l*np.sin(q)
        return result
    def DK(p):
        result = p/(m*(l**2))
        return result
    p_new = qp[1] - t*DV(qp[0])
    q_new = (qp[0] + t*DK(p_new)) #% (2*np.pi)
    bonk = (q_new,p_new)
    return bonk

# D(V)=mgl*sin(q)
# D(K)=L/(ml^(2))

def sigma4(qp,t):
    def DV(q):
        result = m*g*l*np.sin(q)
        return result
    def DK(p):
        result = p/(m*(l**2))
        return result
    a=[0,1/(2*(2-2**(1/3))),1/(2-2**(1/3)),(1-2**(1/3))/(2*(2-2**(1/3))),(-2**(1/3))/(2-2**(1/3)),(1-2**(1/3))/(2*(2-2**(1/3))),1/(2-2**(1/3)),1/(2*(2-2**(1/3)))]
    qp_new = qp
    for n in range(4):
        i = 2*n+1
        qp_old = qp_new
        p_old = qp_old[1]
        q_old = qp_old[0]
        if i == 1:
            p_new = p_old
            q_new = (q_old + a[i] * t * (DK(p_new)))#% (2*np.pi)
            qp_new = (q_new, p_new)
            qp_old = qp_new
            p_old = qp_old[1]
            q_old = qp_old[0]
        if i > 1:
            p_new = p_old - a[i-1]*t*(DV(q_old))
            q_new = (q_old + a[i]*t*(DK(p_new)))#% (2*np.pi)
            qp_new = (q_new,p_new)
    return qp_new


#First order
def iterated_sigma1(qp, t_tot, n):
    interval = t_tot/n
    newqp = qp
    qvalues = np.zeros(n+1)
    qvalues[0] = qp[0]
    pvalues = np.zeros(n+1)
    pvalues[0] = qp[1]
    for i in range(int(n)):
        newqp = sigma1(newqp,interval)
        qvalues[i + 1] = newqp[0]
        pvalues[i + 1] = newqp[1]
    return qvalues, pvalues

#Fourth order
def iterated_sigma4(qp, t_tot, n):
    interval = t_tot/n
    newqp = qp
    qvalues = np.zeros(n+1)
    qvalues[0] = qp[0]
    pvalues = np.zeros(n+1)
    pvalues[0] = qp[1]
    for i in range(int(n)):
        newqp = sigma4(newqp,interval)
        qvalues[i + 1]=newqp[0]
        pvalues[i + 1] = newqp[1]
    return qvalues, pvalues

# BEGINNING OF MAIN PROGRAM


# physical params:
m = 300 #mass
l = 10 #length
g = 9.8
init_condition = (3*np.pi/4,0)

#time params
t = 100 #total time
n = 10000 #number of intervals over which to iterate the integrator: t/n tells us the length of each interval, should be small


qdata, pdata = iterated_sigma4(init_condition,t,n) # currently showing fourth-order approximation
time = np.linspace(0,t,num=n+1)

x = time
y = qdata
z = pdata
plt.subplot(1,3,1)
plt.plot(x,y)
plt.title("theta (q) vs time")
plt.subplot(1,3,2)
plt.plot(x,z)
plt.title("L (p) vs time")
plt.subplot(1,3,3)
plt.plot(y,z)
plt.title("theta (q) vs L (p) ")
plt.show()



